{
    "project": {},
    "files": {
        "public/js/tokenizer.js": {
            "name": "public/js/tokenizer.js",
            "modules": {},
            "classes": {
                "CourseCodeTokenizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "public/lib/backbone-uniquemodel/backbone.uniquemodel.js": {
            "name": "public/lib/backbone-uniquemodel/backbone.uniquemodel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/lib/jquery/jquery-1.9.1.js": {
            "name": "public/lib/jquery/jquery-1.9.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "spec-client/lib/jasmine-1.3.1/jasmine.js": {
            "name": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "CourseCodeTokenizer": {
            "name": "CourseCodeTokenizer",
            "shortname": "CourseCodeTokenizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "public/js/tokenizer.js",
            "line": 16,
            "description": "Parses course codes into tokens that can be\ninterpretted by higher level functions.  Also offers\nlow-level comparisons of token objects.  THIS CLASS\nSHOULD NEVER BE CALLED DIRECTLY."
        }
    },
    "classitems": [
        {
            "file": "public/js/tokenizer.js",
            "line": 25,
            "description": "Compares course code strings for equality.  This goes\nbeyond string comparison; compares if the course codes are\nreferring to the same type of course, whether it is a single\ncourse or multiple courses",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "courseCode1",
                    "description": "Course code as a string",
                    "type": "String"
                },
                {
                    "name": "courseCode2",
                    "description": "Course code as a string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the course codes are logically equal, false otherwise",
                "type": "Boolean"
            },
            "class": "CourseCodeTokenizer"
        },
        {
            "file": "public/js/tokenizer.js",
            "line": 41,
            "description": "parses a courseCode into a token, separating the different\nportions of the course code string into an object that can be\nquickly interpretted",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "courseCode",
                    "description": "The course code string being parsed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A token object with the course code parsed into properties",
                "type": "Object"
            },
            "class": "CourseCodeTokenizer"
        },
        {
            "file": "public/js/tokenizer.js",
            "line": 113,
            "description": "checks if a course code matches a query multiple course codes.  This method\ncalls parse and matchObject methods of CourseCodeTokenizer to perform comparison",
            "itemtype": "method",
            "name": "matchQuery",
            "params": [
                {
                    "name": "courseCode",
                    "description": "A string that represents the course code being queried against",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "A string that queries the course code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the courseCode is a member of the query, false otherwise",
                "type": "Boolean"
            },
            "class": "CourseCodeTokenizer"
        },
        {
            "file": "public/js/tokenizer.js",
            "line": 128,
            "description": "similar to matchQuery, except it matches object against object\ninstead of string against string.",
            "itemtype": "method",
            "name": "matchObject",
            "params": [
                {
                    "name": "codeObject",
                    "description": "The token object that is checked for belonging within the query",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "The query object that is being used compare against the token",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the codeObject is a member of the token's query, false otherwise",
                "type": "Boolean"
            },
            "class": "CourseCodeTokenizer"
        },
        {
            "file": "public/js/tokenizer.js",
            "line": 165,
            "description": "Performs a deep, logical copy of a course token",
            "itemtype": "method",
            "name": "copyToken",
            "params": [
                {
                    "name": "obj",
                    "description": "The token that is being copied",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a deep copy of the param",
                "type": "Boolean"
            },
            "class": "CourseCodeTokenizer"
        },
        {
            "file": "public/lib/backbone-uniquemodel/backbone.uniquemodel.js",
            "line": 8,
            "description": "UniqueModel wrapper converts regular Backbone models into\nunique ones.\n\nExample:\n  var UniqueUser = UniqueModel(User);\n\nIf this is model is synced between windows, you need to\nspecify the model's name (string) and a valid storage adapter\n(currently just 'localStorage').\n\nExample:\n  var SyncedUniqueUser = UniqueModel(User, 'User', 'localStorage');",
            "class": ""
        },
        {
            "file": "public/lib/backbone-uniquemodel/backbone.uniquemodel.js",
            "line": 170,
            "description": "Wraps localStorage access and onstorage events. Designed\nso that this can be swapped out for another adapter (i.e.\nsessionStorage or a localStorage-backed library like lscache)",
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 3837,
            "description": "For feature detection",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to test for native support",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 3845,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 3865,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 3874,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 4001,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 4012,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "public/lib/jquery/jquery-1.9.1.js",
            "line": 4505,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 37,
            "description": "Maximum levels of nesting that will be included when an object is pretty-printed",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 42,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 47,
            "description": "By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 62,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 126,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 134,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 144,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 154,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 164,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 175,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 187,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 197,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 211,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 226,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 271,
            "description": "The name of the spy, if provided.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 275,
            "description": "Is this Object a spy?",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 279,
            "description": "The actual function this spy stubs.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 284,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 293,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 307,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 323,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 342,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 361,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 381,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 427,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 437,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 455,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 465,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods",
                "type": "jasmine.Spy"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 485,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 503,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 516,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "jasmine.Matchers"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 530,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 540,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 551,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 563,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 575,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 587,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 607,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 646,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 651,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 659,
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 713,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 751,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 762,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 779,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 786,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 793,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1013,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1044,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1071,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1173,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1250,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1258,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1267,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1276,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1285,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1295,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1304,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1311,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1318,
            "description": "Matcher that compares the actual to null.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1325,
            "description": "Matcher that compares the actual to NaN.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1336,
            "description": "Matcher that boolean not-nots the actual.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1344,
            "description": "Matcher that boolean nots the actual.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1352,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1374,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1377,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1401,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1426,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1429,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1446,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1455,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1473,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision,",
                    "description": "as number of decimal places",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1487,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1664,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1760,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1795,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1801,
            "description": "The total count of results",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1805,
            "description": "Number of passed results",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1809,
            "description": "Number of failed results",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1813,
            "description": "Was this suite/spec skipped?",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1817,
            "ignore": "",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1823,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1834,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1842,
            "description": "Getter for the results: message & results.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1849,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1869,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1875,
            "description": "Base class for pretty printing for expectation results.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 1882,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2123,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2200,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2239,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2262,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2275,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2287,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2443,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": ""
        },
        {
            "file": "spec-client/lib/jasmine-1.3.1/jasmine.js",
            "line": 2540,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/lib/jquery/jquery-1.9.1.js:3845"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/lib/jquery/jquery-1.9.1.js:4012"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "unknown tag: ignore",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nUniqueModel wrapper converts regular Backbone models into\nunique ones.\n\nExample:\n  var UniqueUser = UniqueModel(User);\n\nIf this is model is synced between windows, you need to\nspecify the model's name (string) and a valid storage adapter\n(currently just 'localStorage').\n\nExample:\n  var SyncedUniqueUser = UniqueModel(User, 'User', 'localStorage');",
            "line": " public/lib/backbone-uniquemodel/backbone.uniquemodel.js:8"
        },
        {
            "message": "Missing item type\nWraps localStorage access and onstorage events. Designed\nso that this can be swapped out for another adapter (i.e.\nsessionStorage or a localStorage-backed library like lscache)",
            "line": " public/lib/backbone-uniquemodel/backbone.uniquemodel.js:170"
        },
        {
            "message": "Missing item type\nFor feature detection",
            "line": " public/lib/jquery/jquery-1.9.1.js:3837"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " public/lib/jquery/jquery-1.9.1.js:3845"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " public/lib/jquery/jquery-1.9.1.js:3865"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " public/lib/jquery/jquery-1.9.1.js:3874"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " public/lib/jquery/jquery-1.9.1.js:4001"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " public/lib/jquery/jquery-1.9.1.js:4012"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " public/lib/jquery/jquery-1.9.1.js:4505"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:31"
        },
        {
            "message": "Missing item type\nMaximum levels of nesting that will be included when an object is pretty-printed",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:37"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:42"
        },
        {
            "message": "Missing item type\nBy default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:47"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:126"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:226"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:271"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:275"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:279"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:284"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:293"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:307"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:323"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:342"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:361"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:381"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:437"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:455"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:465"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:485"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:503"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:516"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:530"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:540"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:551"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:563"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:575"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:587"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:607"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:646"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:651"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:659"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:713"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:793"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1013"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1044"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1173"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1250"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1258"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1267"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1276"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1285"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1295"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1304"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1311"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1318"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to NaN.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1336"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1344"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1352"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1374"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1377"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1401"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1426"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1429"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1446"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1455"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1473"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1487"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1664"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1760"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1795"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1801"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1805"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1809"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1813"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1823"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1834"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1842"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1849"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1875"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:1882"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2123"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2200"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2239"
        },
        {
            "message": "Missing item type",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2262"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2275"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2287"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2443"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " spec-client/lib/jasmine-1.3.1/jasmine.js:2540"
        }
    ]
}